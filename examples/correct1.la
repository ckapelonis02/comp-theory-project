-- This is a program that implements and tests the quicksort algorithm
-- to sort an array of integers.

-- A simple random number generator.
-- To use it, declare a RandomNumberGenerator and define 
-- 1. The initial value of #number (this corresopnds to the seed of the generator).
-- 2. The value of #max_int ( it corresponds to the maximum value returned by the generator).
-- Then, to get a random number, call the next() method and use the returned value.

@defmacro N1 1103515245
@defmacro N2 12345
@defmacro N3 2147483648
@defmacro message "Hello people!\n\n"


comp RandomNumberGenerator:
  #number:integer;
  def next()->integer:
    #number = (#number * N1 + N2) % N3;
    if (#number<0):
      #number = -#number;
    endif;
    return #number;
  enddef;

  def setNumber(x:integer):
      #number = x;
  enddef;
endcomp;

-- Swap the elements of array a at positions i and j
-- assuming that i and j are valid indices
def swap(a[]:integer, i:integer, j:integer):
  temp:integer;
  temp = a[i];
  a[i] = a[j];
  a[j] = temp;
enddef;

-- Impelementation of the quick sort algorithm
def quickSort(a[]:integer, low:integer, high:integer) -> void:
  pivot, i, j : integer;
  if (low < high):
    pivot = low;
    i = low;
    j = high;
    while (i < j):
      while(a[i] <= a[pivot] and i < high):
        i = i+1;
      endwhile;
      while(a[j] > a[pivot]):
        j = j-1;
      endwhile;
      if (i < j):
        swap(a,i,j);
      endif;
    endwhile;
    swap(a,pivot,j);
    quickSort(a, low, j - 1);
    quickSort(a, j + 1, high);
  endif;
enddef;

-- Print contents of an array
def printArray(a[]:integer, size:integer):
  for i in [0:size]:
    writeInteger(a[i]);
    if (i==size-1):
      continue;
    endif;
    writeStr(", ");
  endfor;
  writeStr("\n");
enddef;

def prime(n: integer)-> bool: 
  i: integer; 
  result, isPrime: bool;
      
  if (n < 0): 
    result = prime(-n);
  else: 
    if (n < 2): 
      result = False;    
    else: 
      if (n == 2): 
        result = True;
      else: 
        if (n % 2 == 0):
          result = False;
        else:  
          i = 3;
          isPrime = True;
          while (isPrime and (i < n / 2) ): 
            isPrime = n % i != 0;
            i = i + 2;
          endwhile;
          result = isPrime;
        endif;
      endif;
    endif;
  endif;
   
  return result;
enddef;


def calcAvg(a[]:integer, size:integer) -> scalar:
  avg: scalar;
  avg = 0;
  for i in [0:size]:
    avg+=a[i];
  endfor;
  return avg/size;   
enddef;

def isPrime(a[]:integer, size:integer):
  primeArray := [ prime(elem) for elem: integer in a of 100 ] : bool;
  for i in [0:size]:
    if (primeArray[i]):
      writeInteger(a[i]);
      writeStr(" is prime!\n");
    endif;
  endfor;
enddef;

-- Test quickSort
def main():
  const aSize = 100:integer;
  a[aSize]:integer;
  rand: RandomNumberGenerator;

  writeStr(message);

  writeStr("Give a seed for the random number generator: ");
  rand.setNumber(readInteger());

  -- Create an array of random numbers from 0 to 999
  for i in [0:aSize]:
      a[i] = rand.next() % 1000;
  endfor;
  
  writeStr("Random array generated:\n");
  printArray(a,aSize);

  quickSort(a,0,aSize-1);

  writeStr("Sorted array:\n");
  printArray(a,aSize);

  writeStr("Prime numbers of the array:\n");
  isPrime(a, 100);

  writeStr("Average of array:\n");
  writeScalar(calcAvg(a, aSize));

  @defmacro message "\nBye people!\n"
  writeStr(message);
enddef;